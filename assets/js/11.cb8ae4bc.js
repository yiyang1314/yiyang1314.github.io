(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{178:function(n,s,t){"use strict";t.r(s);var a=t(0),i=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("div",{staticClass:"content"},[n._m(0),n._v(" "),n._m(1),n._v(" "),n._m(2),s("p",[n._v("要将12位图像 buffer 拉伸为 16 位图像，可以采用如下方法：")]),n._v(" "),n._m(3),n._v(" "),s("p",[n._v("new_pixel[i] = (original_pixel[i] - min_value) * 65535 / (max_value - min_value)")]),n._v(" "),s("p",[n._v("其中 original_pixel[i] 表示原始图像中第 i 个像素值，min_value 和 max_value 分别表示原始图像所有像素值中的最小和最大值。")]),n._v(" "),s("p",[n._v("通过这样的方式，就可以将 12 位图像 buffer 拉伸为 16 位图像。需要注意的是，在编写代码时要处理好边界条件，确保图像处理的正确性。")]),n._v(" "),n._m(4),n._v(" "),n._m(5),n._v(" "),n._m(6),n._v(" "),n._m(7),n._v(" "),n._m(8),n._v(" "),n._m(9),n._m(10),n._v(" "),n._m(11),n._v(" "),n._m(12),n._v(" "),n._m(13),n._v(" "),s("blockquote",[s("p",[n._v("将 "),s("code",[n._v("IntPtr")]),n._v(" 类型保存为不同位数和不同格式的图像文件，需要使用相关的 C# 图像处理库（如 OpenCVSharp, "),s("a",{attrs:{href:"http://libtiff.net/",target:"_blank",rel:"noopener noreferrer"}},[n._v("LibTiff.NET"),s("OutboundLink")],1),n._v(", AForge.Imaging 等）来实现。下面给出一些简单的示例代码：")]),n._v(" "),n._m(14),n._v(" "),n._m(15),n._m(16),n._v(" "),n._m(17),n._v(" "),n._m(18),n._m(19),n._v(" "),n._m(20),n._v(" "),n._m(21),s("p",[n._v("此函数使用了 "),s("a",{attrs:{href:"http://libtiff.net/",target:"_blank",rel:"noopener noreferrer"}},[n._v("LibTiff.NET"),s("OutboundLink")],1),n._v(" 库，将 "),s("code",[n._v("IntPtr")]),n._v(" 数据保存为 TIFF 格式的图像文件。")]),n._v(" "),n._m(22),n._v(" "),n._m(23),n._m(24)]),n._v(" "),n._m(25),n._v(" "),n._m(26),n._v(" "),n._m(27),n._m(28),n._v(" "),n._m(29),n._v(" "),n._m(30),n._v(" "),n._m(31),n._m(32),n._v(" "),n._m(33),n._v(" "),s("p",[n._v("下面是用 C++ 实现 Mono12Packed 图像格式拉伸为 16 位并保存为 tiff、png、jpg 和 raw 文件的示例代码。保存 TIFF 和 JPEG 图像需要使用第三方库，以此处使用的 libtiff 和 libjpeg 库为例。")]),n._v(" "),n._m(34),n._m(35),n._v(" "),s("p",[n._v("图像深度（bit depth）是指数字图像中用来表达单个像素颜色值的二进制位数。它决定了一个像素能够表示的不同颜色数量和灰度阶数的范围。")]),n._v(" "),s("p",[n._v("在一个图像中，每个像素由一定数量的位组成：一个二元格式的黑白图像包含1比特的每个像素；8位灰度图像可以表示256个不同的灰度级别；而16位的彩色图像则可以表示65536（2^{16}216）种不同的颜色，即每个像素有 2^828 种红色、2^828 种绿色和 2^828 种蓝色组合而成。")]),n._v(" "),s("p",[n._v("图像深度越高，能够表示的颜色范围也就越广，我们更容易区分不同的亮度，并在拍摄中保留更多的信息。然而，高位数的图像会占用更多的存储空间和计算时间，并对输入设备与输出设备的性能要求更高。")]),n._v(" "),s("p",[n._v("另外，需要注意的是，在图像处理过程中，当我们将低位数的图像放大或缩小时，经常会产生明显的失真和模糊。这是因为像素之间的差异被放大到可见的程度。因此，在图像处理任务中，选择正确的图像深度非常重要。")]),n._v(" "),n._m(36),n._v(" "),n._m(37),n._v(" "),s("p",[n._v("对于 8 位灰度图像每个像素点的值在 0-255 的范围内取值，而 16位灰度图像每个像素值在 0-65535 的范围内取值。因此，简单的方法是通过线性缩放将 8 位像素值映射到 16 位像素值。")]),n._v(" "),n._m(38),n._v(" "),s("p",[n._v("以下为C#代码示例：")]),n._v(" "),n._m(39),n._m(40),n._v(" "),n._m(41),n._v(" "),s("p",[n._v("这里是关于不同图像格式的存储结构及其实现原理的简单介绍。")]),n._v(" "),n._m(42),n._v(" "),n._m(43),n._m(44),n._v(" "),n._m(45),n._v(" "),n._m(46),n._m(47),n._v(" "),n._m(48),s("p",[n._v("在读取图像时，需要将从文件中读取的数据按照上述格式解析出各自的像素值。")]),n._v(" "),s("p",[n._v("注：以上内容可能有多种实现方式和变形格式。这里仅介绍了常见的情况，具体使用时请根据自己的需求和待处理数据的格式进行适当修改。")])])}),[function(){var n=this._self._c;return n("h1",{attrs:{id:"图像功能实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图像功能实现"}},[this._v("#")]),this._v(" 图像功能实现")])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-1-使用c-实现12位图像buffer-拉伸为16位图像"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-使用c-实现12位图像buffer-拉伸为16位图像"}},[this._v("#")]),this._v(" 1.1 使用C++实现12位图像buffer 拉伸为16位图像")])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[n._v("这是一个相对较广泛的向导性问题，需要进行多方面的考虑和分析。下面是一些建议和思考：\n\n首先确定应用程序的具体需求。您需要什么功能？它是用来管理什么类型的数据或信息？例如，如果它是用于管理图片或视频数据，那么将OPENCV集成到WPF中可能会很重要。\n\n确定数据库设计，以便能够存储和检索必要的数据。使用MYSQL可以提供一个开源且跨平台的解决方案，但需要熟悉SQL。\n\n开发并测试您的WPF用户界面。这需要一定的编程技术和WPF知识。\n\n集成OPENCV库到您的应用程序中。这需要你对计算机视觉技术有良好的理解，以及集成C++代码到C#的能力。\n\n编写后台逻辑代码，使其与数据库交互以获取/存储数据。需要熟悉MySQL数据库，并在C#中使用ADO.NET库来实现与数据库的通信。\n\n最后，进行综合测试和部署。确保整个应用程序在各个环境中都能正常运行。\n\n总之，开发一个涉及多种技术和领域的应用程序是一个复杂的工作，需要大量的计划、设计和测试。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])])},function(){var n=this._self._c;return n("ol",[n("li",[this._v("首先确定如何将 12 位数据（假设数据类型为 unsigned short）扩展成 16 位数据。我们可以考虑在高四位补充 0 或者重复低四位的数值，例如，将 0x123 转换为 0x0123 或者 0x1230。")]),this._v(" "),n("li",[this._v("定义一个新数组用于储存 16 位数据，并根据第一步中确定的方式对原始图像的 12 位数据进行扩展。")]),this._v(" "),n("li",[this._v("在扩展后的数组中进行拉伸操作，即根据结果图像的最大灰度值和最小灰度值，按比例对每个像素进行重新映射。例如，如果结果图像的最大灰度值是 65535，最小灰度值是 0，则对于第 i 个像素，新的灰度值应该是：")])])},function(){var n=this._self._c;return n("p",[n("img",{attrs:{src:"assets/ball.jpeg",alt:"img"}})])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-2-实现大恒相机图像12位的buffer拉伸为16位图像"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-实现大恒相机图像12位的buffer拉伸为16位图像"}},[this._v("#")]),this._v(" 1.2 实现大恒相机图像12位的buffer拉伸为16位图像")])},function(){var n=this,s=n._self._c;return s("blockquote",[s("p",[n._v("对于大恒相机的图像，可以使用其提供的 SDK 进行采集和处理。将 12 位图像 buffer 拉伸为 16 位图像的方法可以如下：")]),n._v(" "),s("ol",[s("li",[n._v("在 SDK 中设置数据的输出格式，使其输出 12 位数据（如果默认输出是 16 位，则需要进行额外的转换处理）。")]),n._v(" "),s("li",[n._v("接收采集到的图像数据，并按照数据类型进行强制转换。假设数据类型是 uint16_t，则需将每个 12 位的数值高四位补零得到一个完整的 uint16_t 数值。")]),n._v(" "),s("li",[n._v("定义一个新数组用于储存 16 位数据，并按第二步方式对原始图像的 12 位数据进行扩展。")]),n._v(" "),s("li",[n._v("在扩展后的数组中进行拉伸操作，具体方法同上一问题，即根据结果图像的最大灰度值和最小灰度值，按比例对每个像素进行重新映射。")]),n._v(" "),s("li",[n._v("将处理后的数据传递给后续的图像处理或显示模块。")])]),n._v(" "),s("p",[n._v("需要注意的是，在实现过程中要检查是否存在数据溢出或越界等情况，并按照实际要求选择合适的映射范围进行拉伸。同时，由于大恒相机可能有不同的型号和设置，需要在程序中进行相应的适配和调整，以确保正确性和稳定性。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-3-用c-实现byte-数组-保存为tiff，png-raw-jpg功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-用c-实现byte-数组-保存为tiff，png-raw-jpg功能"}},[this._v("#")]),this._v(" 1.3 用c++实现byte[]数组 保存为tiff，png,raw,jpg功能")])},function(){var n=this,s=n._self._c;return s("blockquote",[s("p",[n._v("将 byte[] 数组保存为不同格式的图像文件，可以使用相关的 C++ 图像处理库（如 libtiff, libpng, libraw, libjpeg 等）来实现。具体实现步骤可以参考以下步骤：")]),n._v(" "),s("ol",[s("li",[n._v("根据需要保存的图像格式选择相应的库，并对其进行初始化配置。")]),n._v(" "),s("li",[n._v("将 byte[] 数组中的数据传递到库中，生成相应的图像对象或结构体。")]),n._v(" "),s("li",[n._v("根据函数或接口将图像对象或结构体保存为指定格式的图像文件。这些函数或接口通常提供有关压缩、颜色空间、分辨率等参数的选项。")]),n._v(" "),s("li",[n._v("释放所有已分配的内存资源，关闭相关的库。")])]),n._v(" "),s("p",[n._v("下面是一个简单的代码示例，实现将 byte[] 数组保存为 TIFF 格式的图像文件。")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language-c++ line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <tiffio.h>\n\nvoid saveTiff(byte* data, int width, int height, const char* filename) {\n    // 打开 TIFF 文件\n    TIFF* tif = TIFFOpen(filename, "w");\n\n    if (tif) {\n        // 设置 TIFF 文件属性\n        TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width);\n        TIFFSetField(tif, TIFFTAG_IMAGELENGTH, height);\n        TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, 8); // 每个样本位数\n        TIFFSetField(tif, TIFFTAG_SAMPLEFORMAT, SAMPLEFORMAT_UINT); // 数据格式\n        TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, 1);\n        TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, height);\n\n        // 写入图像数据\n        for (int row = 0; row < height; row++) {\n            if (TIFFWriteScanline(tif, &data[row * width], row) < 0) {\n                break;\n            }\n        }\n\n        TIFFClose(tif);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("根据不同的文件格式，需要调用相应格式对应的库并设置相应的属性细节。请参考相关的库的文档和示例进行进一步的学习和实践。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-4-c-把byte-保存为12位和16位的bmp-png"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-c-把byte-保存为12位和16位的bmp-png"}},[this._v("#")]),this._v(" 1.4 C++ 把byte* 保存为12位和16位的bmp,png")])},function(){var n=this,s=n._self._c;return s("blockquote",[s("p",[n._v("将 byte* 数组保存为不同位数和不同格式的图像文件，需要使用相关的 C++ 图像处理库（如 OpenCV，libpng 等）来实现。下面给出一些简单的示例代码：")]),n._v(" "),s("ol",[s("li",[n._v("将 byte* 保存为12位BMP图像文件")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("c++复制代码#include <opencv2/opencv.hpp>\n#include <stdint.h>\n\nvoid save12BitBmp(byte* data, int width, int height, const char* filename) {\n    const int channels = 1;\n    cv::Mat image = cv::Mat(height, width, CV_MAKETYPE(CV_16U, channels));\n    uint16_t *imageData = (uint16_t*)image.ptr(0);//获得图像数据首地址，转换成16-bit指针\n    int imageIndex = 0;\n    for (int y = 0; y < height; y++) {\n        for (int x = 0; x < width; x++) {            \n            imageData[imageIndex++] = ((data[x + y * width] & 0x0F) << 8 | (data[x + y * width] & 0xF0) << 4);\n        }\n    }\n    // 转换为 12 位图像数据，再保存\n    cv::imwrite(filename, image);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("此函数使用了 OpenCV 库，创建一个 Mat 对象，并将 byte* 数组转换为 16 位的 unsigned short 类型，在给定范围之内映射到 12 位。最后将其保存为 BMP 格式的图像文件。")]),n._v(" "),s("ol",[s("li",[n._v("将 byte* 保存为16位PNG图像文件")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <png.h>\n\nvoid save16BitPng(byte* data, int width, int height, const char* filename) {\n    FILE *fp;\n    png_structp png_ptr = NULL;\n    png_infop info_ptr = NULL;\n    bool alpha_flag = false;\n    fp = fopen(filename, "wb");\n    if (NULL == fp) {\n        return; // 打开文件失败\n    }\n    png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);\n    if (png_ptr == NULL) {\n        fclose(fp);\n        return; \n    }\n    info_ptr = png_create_info_struct(png_ptr);\n    if (info_ptr == NULL) {\n        fclose(fp);\n        png_destroy_write_struct(&png_ptr, (png_infopp)NULL);\n        return; \n    }\n    png_set_IHDR(png_ptr, info_ptr, width, height, 16, PNG_COLOR_TYPE_GRAY, PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);\n    png_init_io(png_ptr, fp);\n    png_write_info(png_ptr, info_ptr);\n\n    for (int y = 0; y < height; y++) {\n        byte* row = data + y*width*sizeof(uint16_t);\n        png_write_row(png_ptr, (byte*)&row[0]);\n    }\n\n    png_write_end(png_ptr, info_ptr);\n    png_destroy_write_struct(&png_ptr, &info_ptr);\n    fclose(fp);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])]),s("p",[n._v("此函数使用了 libpng 库，创建一个 PNG 结构体和信息结构体，并将 byte* 数组数据保存为 16 位的 PNG 图像文件。")]),n._v(" "),s("p",[n._v("注意，在这个示例中，16位采用unsigned short表示，且需要手动填充每个像素的黑色分量。在实际应用中，根据不同的需求可能需要进一步调整和优化，保证图像保存质量和正确性。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-5-c-把intptr类型-保存为12位和16位的bmp-png，tiff-raw格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-c-把intptr类型-保存为12位和16位的bmp-png，tiff-raw格式"}},[this._v("#")]),this._v(" 1.5 C# 把Intptr类型 保存为12位和16位的bmp,png，tiff,raw格式")])},function(){var n=this._self._c;return n("ol",[n("li",[this._v("将 "),n("code",[this._v("IntPtr")]),this._v(" 保存为12位BMP图像文件")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("using Emgu.CV;\nusing Emgu.CV.Structure;\n\npublic static void Save12BitBmp(IntPtr data, int width, int height, string filename)\n{\n    var channels = 1;\n    using (var image = new Image<Gray, ushort>(width, height))\n    {\n        var imageData = image.DataPointer;\n        var imageIndex = 0;\n        for (var y = 0; y < height; y++)\n        {\n            for (var x = 0; x < width; x++)\n            {\n                imageData[imageIndex++] = (ushort)((Marshal.ReadByte(data, x / 2 + y * width / 2) & 0x0F) << 8 | (Marshal.ReadByte(data, x / 2 + y * width / 2) & 0xF0) << 4);\n            }\n        }\n        // 转换为 12 位图像数据，再保存\n        image.Save(filename);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("此函数使用了 Emgu CV 库，创建一个 Image 对象，并将 "),n("code",[this._v("IntPtr")]),this._v(" 转换为 16 位无符号整数类型，在给定范围之内映射到 12 位。最后将其保存为 BMP 格式的图像文件。")])])},function(){var n=this._self._c;return n("p",[this._v("2.将 "),n("code",[this._v("IntPtr")]),this._v(" 保存为16位PNG图像文件")])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("c#复制代码using AForge.Imaging;\nusing AForge.Imaging.Formats;\nusing System.Drawing;\n\npublic static void Save16BitPng(IntPtr data, int width, int height, string filename)\n{\n    var bitmapData = (Bitmap)ImageDecoder.DecodeFromIntPtr(data, new ImageFormat(isIndexed:false,bitsPerPixel:16));\n    using (var pngEncoder = new PngEncoder())\n    {\n        pngEncoder.Encode(bitmapData, filename);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("此函数使用了 AForge.Imaging 库，将 "),n("code",[this._v("IntPtr")]),this._v(" 数据保存为 16 位 PNG 图像文件。")])])},function(){var n=this._self._c;return n("p",[this._v("3.将 "),n("code",[this._v("IntPtr")]),this._v(" 保存为 TIFF 图像文件")])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('c#复制代码using BitMiracle.LibTiff.Classic;\n\npublic static void SaveTiff(IntPtr data, int width, int height, string filename)\n{\n    using (Tiff output = Tiff.Open(filename, "w"))\n    {\n        if (output == null)\n            return;\n        try\n        {\n            // 设置 TIFF 文件属性\n            output.SetField(TiffTag.IMAGEWIDTH, width);\n            output.SetField(TiffTag.IMAGELENGTH, height);\n            output.SetField(TiffTag.BITSPERSAMPLE, 16); // 每个样本位数\n            output.SetField(TiffTag.SAMPLESPERPIXEL, 1);\n            output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);\n            output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);\n            output.SetField(TiffTag.COMPRESSION, Compression.NONE);\n            output.SetField(TiffTag.ROWSPERSTRIP, height);\n            output.SetField(TiffTag.XRESOLUTION, 96);\n            output.SetField(TiffTag.YRESOLUTION, 96);\n            output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER);\n\n            byte[] buffer = new byte[width * 2];\n            for (int i = 0; i < height; i++)\n            {\n                Marshal.Copy(IntPtr.Add(data, width * 2 * i), buffer, 0, buffer.Length);\n                output.WriteScanline(buffer, i);\n            }\n        }\n        finally\n        {\n            output.Close();\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br")])])},function(){var n=this._self._c;return n("p",[this._v("4.将 "),n("code",[this._v("IntPtr")]),this._v(" 保存为 RAW 图像文件")])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public static void SaveRaw(IntPtr data, int width, int height, string filename)\n{\n    using (var fileStream = new FileStream(filename, FileMode.Create))\n    {\n        using (var binaryWriter = new BinaryWriter(fileStream))\n        {\n            var bufferSize = width * 2;\n            var buffer = new byte[bufferSize];\n            for (var y = 0; y < height; ++y)\n            {\n                Marshal.Copy(data + y * bufferSize, buffer, 0, bufferSize);\n                binaryWriter.Write(buffer);\n            }\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("此函数直接将 "),n("code",[this._v("IntPtr")]),this._v(" 数据以原始的二进制形式保存到 RAW 格式的图像文件中。需要注意的是在不同机器上保存和读取时可能会存在字节序问题，因此在开发过程中要特别注意这方面的设置。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-6-用c-实现一个12位的原始图像intptr-拉伸为16位图像buffer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-用c-实现一个12位的原始图像intptr-拉伸为16位图像buffer"}},[this._v("#")]),this._v(" 1.6 用C#实现一个12位的原始图像IntPtr 拉伸为16位图像buffer")])},function(){var n=this._self._c;return n("blockquote",[n("p",[this._v("要将 12 位的原始图像 "),n("code",[this._v("IntPtr")]),this._v(" 拉伸为 16 位图像，一种简单的方法是对每个像素的值左移四位，然后对不足 16 位部分进行两次复制以填充。以下为示例代码：")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public static unsafe void Stretch12To16Bit(IntPtr input, int width, int height, out ushort[] output)\n{\n    output = new ushort[width * height];\n\n    var inputBytes = new byte[((width*3+1)/2)*height];\n    Marshal.Copy(input, inputBytes, 0, inputBytes.Length);\n\n    fixed (ushort* pOutput = output)\n    {\n        ushort* ptr = pOutput;\n        fixed (byte* pInput = inputBytes)\n        {\n            for (int i = 0; i < inputBytes.Length; i += 3)\n            {\n                int pixelValue = ((pInput[i] << 8) | pInput[i + 1]) << 4;\n                ptr[0] = (pixelValue & 0xFFF0) | ((pixelValue & 0xF) << 1);\n                ptr[1] = (pixelValue & 0xFFF0) | ((pixelValue & 0xF) << 1);\n                ptr += 2;\n            }\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("此函数使用了 "),n("code",[this._v("unsafe")]),this._v(" 代码块和指针操作提高计算效率。在此之前需要将 "),n("code",[this._v("IntPtr")]),this._v(" 转换为字节数组（每个像素占用 1.5 个字节），并根据行宽将其转换成 12 位数据。函数返回一个通过拷贝数据生成的具有 16 位深度的输出缓冲区（"),n("code",[this._v("ushort[]")]),this._v("）。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-7-用c-实现一个mogo12格式-图像intptr-拉伸为16位图像buffer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-用c-实现一个mogo12格式-图像intptr-拉伸为16位图像buffer"}},[this._v("#")]),this._v(" 1.7 用C#实现一个Mogo12格式 图像IntPtr 拉伸为16位图像buffer")])},function(){var n=this._self._c;return n("blockquote",[n("p",[this._v("Mogo12 格式是 Mogo Vision Co. Ltd. 公司的专有图像格式，一种简单的实现方法是对于每个像素值乘以 16 进行拉伸操作，并将不足 16 位的部分用高位进行填充。以下为示例代码：")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("c#复制代码public static unsafe void StretchMogo12Bit(IntPtr input, int width, int height, out ushort[] output)\n{\n    output = new ushort[width * height];\n\n    var buffer = new byte[width * 3];\n    fixed (ushort* pOutput = output)\n    {\n        ushort* ptr = pOutput;\n        for (int y = 0; y < height; y++)\n        {\n            Marshal.Copy(input + y * width * 3 / 2, buffer, 0, buffer.Length);\n            for (int x = 0; x < width; x++)\n            {\n                int pixelValue = ((buffer[x * 3 / 2] & 0x0F) << 8) | buffer[x * 3 / 2 + 1];\n                *ptr++ = (ushort)(pixelValue << 4);\n            }\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("此函数使用 "),n("code",[this._v("unsafe")]),this._v(" 代码块和指针操作提高计算效率，与常规的拉伸函数类似，先将输入缓冲区中存放的数据以一定的格式转换出来（此处采用每个像素 18 位深度的 RGB 数据，中间包含了一个未使用的 6 位），然后对每个像素的值乘以 16 进行拉伸。函数返回一个通过拷贝数据生成的具有 16 位深度的输出缓冲区（"),n("code",[this._v("ushort[]")]),this._v("）。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-8-用c-实现mono12packed图像格式拉伸位16位，并且保存为tiff-png-jpg-raw文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-用c-实现mono12packed图像格式拉伸位16位，并且保存为tiff-png-jpg-raw文件"}},[this._v("#")]),this._v(" 1.8 用C++实现Mono12Packed图像格式拉伸位16位，并且保存为tiff,png,jpg,raw文件")])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('c++复制代码// 包含常用的头文件\n#include <fstream>\n#include <iostream>\n#include <iterator>\n#include <algorithm>\n// 使用 libtiff 库处理 tiff 格式图像\n#include <tiffio.h>\n// 使用 libjpeg 库处理 jpeg 格式图像\n#include <jpeglib.h>\n// OpenCV 库可以读写多种格式的图像\n#include <opencv2/opencv.hpp>\n\nvoid StretchMono12PackedTo16Bit(const uint8_t* input, int width, int height, uint16_t* output)\n{\n    int dstSize = width * height;\n    int srcSize = ((width + 1) / 2) * height * 3;\n\n    const uint8_t* pSrc0 = input;\n    const uint8_t* pSrc1 = input + 2;\n\n    for (int i = 0; i < dstSize; ++i)\n    {\n        int value = (pSrc0[0] << 4) | (pSrc1[0] >> 4);\n        output[i] = static_cast<uint16_t>(value);\n        pSrc0 += 3;\n        pSrc1 += 3;\n        if (pSrc1 >= input + srcSize)\n        {\n            pSrc0++;\n            pSrc1 = pSrc0 + 2;\n        }\n    }\n}\n\nvoid SaveAsTIFF(const std::string& filename, int width, int height, int depth, const void* data)\n{\n    TIFF* tiff = TIFFOpen(filename.c_str(), "w");\n    if (!tiff)\n        return;\n\n    // 设置图像参数\n    TIFFSetField(tiff, TIFFTAG_IMAGEWIDTH, width);\n    TIFFSetField(tiff, TIFFTAG_IMAGELENGTH, height);\n    TIFFSetField(tiff, TIFFTAG_SAMPLESPERPIXEL, 1);\n    TIFFSetField(tiff, TIFFTAG_BITSPERSAMPLE, depth);\n    TIFFSetField(tiff, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);\n    TIFFSetField(tiff, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);\n    TIFFSetField(tiff, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISBLACK);\n\n    // 写入图像数据\n    uint32_t row_bytes = (width * depth + 7) / 8;\n    for (int i = 0; i < height; ++i)\n    {\n        TIFFWriteScanline(tiff, static_cast<const char*>(data) + i * row_bytes, i);\n    }\n\n    // 关闭文件\n    TIFFClose(tiff);\n}\n\nvoid SaveAsPNG(const std::string& filename, int width, int height, const void* data)\n{\n    cv::Mat image(static_cast<int>(height), static_cast<int>(width), CV_16U, const_cast<void*>(data));\n    cv::imwrite(filename, image);\n}\n\nvoid SaveAsJPEG(const std::string& filename, int width, int height, const void* data)\n{\n    // 声明并初始化 JPEG 相关参数\n    struct jpeg_compress_struct cinfo{};\n    struct jpeg_error_mgr jerr{};\n\n    // 初始化错误处理\n    cinfo.err = jpeg_std_error(&jerr);\n\n    // 打开输出文件\n    FILE* outfile = fopen(filename.c_str(), "wb");\n    if (!outfile)\n        return;\n\n    // 设置输出文件\n    jpeg_create_compress(&cinfo);\n    jpeg_stdio_dest(&cinfo, outfile);\n\n    // 设置图像参数\n    cinfo.image_width = width;\n    cinfo.image_height = height;\n    cinfo.input_components = 1;\n    cinfo.in_color_space = JCS_GRAYSCALE;\n\n    // 设置压缩质量\n    jpeg_set_defaults(&cinfo);\n    jpeg_set_quality(&cinfo, 90, TRUE);\n\n    // 开始压缩\n    jpeg_start_compress(&cinfo, TRUE);\n    JSAMPROW row_pointer[1];\n    int row_stride = width * sizeof(decltype(*static_cast<const uint16_t*>(data)));\n    while (cinfo.next_scanline < cinfo.image_height)\n    {\n        row_pointer[0] = static_cast<JSAMPLE*>(&const_cast<uint16_t*>(static_cast<const uint16_t*>(data))[cinfo.next_scanline * width]);\n        jpeg_write_scanlines(&cinfo, row_pointer, 1);\n    }\n\n    // 完成压缩\n    jpeg_finish_compress(&cinfo);\n    fclose(outfile);\n    jpeg_destroy_compress(&cinfo);\n}\n\nvoid SaveAsRAW(const std::string& filename, const void* data, size_t size)\n{\n    std::ofstream file(filename, std::ios::binary | std::ios::out);\n    if (!file)\n        return;\n\n    std::copy(static_cast<const uint8_t*>(data), static_cast<const uint8_t*>(data) + size,\n              std::ostream_iterator<uint8_t>(file));\n\n    file.close();\n}\n\nint main()\n{\n    // 加载输入数据，假设宽、高、深度等都已知\n    int width = 1920;\n    int height = 1080;\n    std::vector<uint8_t> inputData(width * height * 3 / 2);\n    std::ifstream inputFile\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_2-1-图像深度原理是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-图像深度原理是什么"}},[this._v("#")]),this._v(" 2.1 图像深度原理是什么")])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_2-2-图像深度转换原理和实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-图像深度转换原理和实现"}},[this._v("#")]),this._v(" 2.2 图像深度转换原理和实现")])},function(){var n=this._self._c;return n("blockquote",[n("p",[this._v("深度转换是将一个任意位数的图像转换为另一个不同位数的图像的过程，通常用于格式转换或者改变一个图像的亮度范围。下面介绍一种将 8 位灰度图像转换为 16 位灰度图像的实现方法。")])])},function(){var n=this._self._c;return n("p",[n("img",{attrs:{src:"assets/image-20230418225326185.png",alt:"image-20230418225326185"}})])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public static void Convert8To16Bit(byte[] input, int width, int height, out ushort[] output)\n{\n    output = new ushort[width * height];\n\n    byte minPixelValue = input.Min();\n    byte maxPixelValue = input.Max();\n\n    double span = (double)(ushort.MaxValue - ushort.MinValue) / (maxPixelValue - minPixelValue);\n\n    for(int i=0; i<input.Length; ++i) {\n        int pixelValue = (int)Math.Round((input[i] - minPixelValue) * span + ushort.MinValue);\n        output[i] = (ushort)pixelValue;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])])},function(){var n=this._self._c;return n("ul",[n("li",[this._v("此函数输入一维数组 "),n("code",[this._v("input")]),this._v(" 中存储了 8 位灰度图像每个像素的值，输出一维数组 "),n("code",[this._v("output")]),this._v(" 表示位置对应的 16 位像素值。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_2-3-整理一下图像格式mono12packed，mono12，mono8，mono8packed的存储结构和实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-整理一下图像格式mono12packed，mono12，mono8，mono8packed的存储结构和实现原理"}},[this._v("#")]),this._v(" 2.3 整理一下图像格式Mono12Packed，Mono12，Mono8，Mono8Packed的存储结构和实现原理")])},function(){var n=this._self._c;return n("ol",[n("li",[this._v("Mono12Packed Mono12Packed 是一种 12 位深度、只有一个灰度通道的图像格式，其中每两个相邻像素共用3个字节（即24位）进行存储，低位在前、高位在后。具体来说，如果用 Little Endian 方式编码，每三个字节可以表示两个像素：")])])},function(){var n=this._self._c;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("|Byte0, Byte1, Byte2|Byte3, Byte4, Byte5|\n|Pixel 0, lo byte   |Pixel 0, hi nibble|\n|Pixel 1, hi nibble |Pixel 1, lo byte  |\n")])]),this._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[this._v("1")]),n("br"),n("span",{staticClass:"line-number"},[this._v("2")]),n("br"),n("span",{staticClass:"line-number"},[this._v("3")]),n("br")])])},function(){var n=this._self._c;return n("p",[this._v("在实际使用中，需要将读取到的数据进行解码处理，重新组合成以连续字节序列存储的格式，即将上述示例中的 "),n("code",[this._v("Pixel 0")]),this._v(" 和 "),n("code",[this._v("Pixel 1")]),this._v(" 组合成两个 16 位整数。")])},function(){var n=this._self._c;return n("ol",[n("li",[this._v("Mono12 Mono12 是一种 12 位深度的图像格式，每个像素用两个字节（16位）存储，高位在前、低位在后。具体来说，在 Little Endian 编码方式下，每个像素采用以下格式进行存储：")])])},function(){var n=this._self._c;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("|Byte0        |Byte1        |\n|Pixel, high  |Pixel, low   |\n")])]),this._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[this._v("1")]),n("br"),n("span",{staticClass:"line-number"},[this._v("2")]),n("br")])])},function(){var n=this._self._c;return n("ol",[n("li",[this._v("Mono8 Mono8 是一种 8 位深度的灰度图像格式，用一个字节（8位）存储每个像素的灰度值。每个像素在图像文件中占用一个字节，范围是 0 到 255。")]),this._v(" "),n("li",[this._v("Mono8Packed Mono8Packed 是一种 8 位深度的灰度图像格式，采用一定方式进行压缩以节约存储空间。具体来说，它把两个像素共用一个字节（即8位）进行存储，低位存放第一个像素的值，高位存放第二个像素的值。具体格式如下：")])])},function(){var n=this._self._c;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("复制代码|Byte0 |\n|Pixel 0 (lo)|Pixel 1 (hi)|\n")])]),this._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[this._v("1")]),n("br"),n("span",{staticClass:"line-number"},[this._v("2")]),n("br")])])}],!1,null,null,null);s.default=i.exports}}]);