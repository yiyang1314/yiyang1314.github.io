(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{180:function(n,s,a){"use strict";a.r(s);var t=a(0),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("div",{staticClass:"content"},[n._m(0),n._v(" "),n._m(1),n._v(" "),n._m(2),n._v(" "),s("p",[n._v("以下是C++代码实现：")]),n._v(" "),n._m(3),s("p",[n._v("上述代码包含了4个函数，分别用于保存tiff、bmp、png和raw格式的图像文件。其中，tiff和png文件需要使用相关库进行编译，具体为libtiff和libpng。另外，代码中使用了OpenCV库，用于将RGB数据转换成Mat格式，然后保存成bmp文件。")]),n._v(" "),n._m(4),n._v(" "),s("p",[n._v("需要注意的是，上述代码中只是做了简单的灰度值计算，如果需要更加精确的转换可以考虑使用其他的算法，如Luma通道计算。")]),n._v(" "),n._m(5),n._v(" "),n._m(6),n._v(" "),s("p",[n._v("以下是C#代码实现：")]),n._v(" "),n._m(7),s("p",[n._v("上述代码包含了4个函数，分别用于保存tiff、bmp、png和raw格式的图像文件。其中，tiff、bmp和png文件均需要使用System.Drawing命名空间下的相关类进行编写。")]),n._v(" "),n._m(8),n._v(" "),s("p",[n._v("需要注意的是，上述代码中只是做了简单的灰度值计算，如果需要更加精确的转换可以考虑使用其他的算法，如Luma通道计算。而在保存tiff、bmp和png文件时，还需要设置对应的256级灰度调色板。")]),n._v(" "),n._m(9),n._v(" "),n._m(10),n._v(" "),s("p",[n._v("以下是C++代码实现：")]),n._v(" "),n._m(11),n._m(12),n._v(" "),s("p",[n._v("MONO12图像buffer存储结构和原理、Mono8图像buffer存储结构和原理、RGB16图像buffer存储结构和原理、RGB8图像buffer存储结构和原理")]),n._v(" "),s("p",[n._v("以下是各种图像buffer存储结构和原理的整理：")]),n._v(" "),n._m(13),n._v(" "),s("p",[n._v("以上是各种图像buffer的存储结构和原理的整理。需要特别说明的是，MONO10Packed和MONO12Packed采用了压缩算法进行存储，可以在一定程度上减少存储空间的占用。此外，RGB8和RGB16是三通道的图像格式，分别对应红、绿、蓝三个颜色通道，每个通道的像素值都可以在0-255或0-65535之间变化。")]),n._v(" "),n._m(14),n._v(" "),n._m(15),n._v(" "),n._m(16),s("p",[n._v("调用示例：")]),n._v(" "),n._m(17),s("p",[n._v("来源链接：["),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/The_C_Programming_Language",target:"_blank",rel:"noopener noreferrer"}},[n._v("1"),s("OutboundLink")],1),n._v("] ["),s("a",{attrs:{href:"https://www.zhihu.com/question/26553263",target:"_blank",rel:"noopener noreferrer"}},[n._v("2"),s("OutboundLink")],1),n._v("] ["),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/72581663",target:"_blank",rel:"noopener noreferrer"}},[n._v("3"),s("OutboundLink")],1),n._v("] ["),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/8-bit_computing",target:"_blank",rel:"noopener noreferrer"}},[n._v("4"),s("OutboundLink")],1),n._v("]")]),n._v(" "),s("p",[n._v("-"),s("a",{attrs:{href:"https://www.cnblogs.com/ybqjymy/p/13672531.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("LIBTIFF库的使用心得 - 一杯清酒邀明月 - 博客园 (cnblogs.com)"),s("OutboundLink")],1)])])}),[function(){var n=this._self._c;return n("h1",{attrs:{id:"工业相机图像处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工业相机图像处理"}},[this._v("#")]),this._v(" 工业相机图像处理")])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_1-c-实现图像深度转换，并且保存常见的图像格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-c-实现图像深度转换，并且保存常见的图像格式"}},[this._v("#")]),this._v(" 1.C++实现图像深度转换，并且保存常见的图像格式")])},function(){var n=this._self._c;return n("blockquote",[n("p",[this._v("用C++开发一份24位的RGB彩色图像buffer转化为8位图像,并且保存图像文件为tiff，bmp,png,raw格式，水平垂直分辨率为96；")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <iostream>\n#include <fstream>\n#include <vector>\n#include <cmath>\n#include <tiffio.h>\n#include <png.h>\n#include <opencv2/opencv.hpp>\n\nusing namespace std;\n\nvoid saveTIFF(string filename, vector<unsigned char>& data, int width, int height)\n{\n    TIFF* tiff = TIFFOpen(filename.c_str(), "w");\n\n    TIFFSetField(tiff, TIFFTAG_IMAGEWIDTH, width);\n    TIFFSetField(tiff, TIFFTAG_IMAGELENGTH, height);\n    TIFFSetField(tiff, TIFFTAG_BITSPERSAMPLE, 8);\n    TIFFSetField(tiff, TIFFTAG_COMPRESSION, COMPRESSION_NONE);\n    TIFFSetField(tiff, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_RGB);\n    TIFFSetField(tiff, TIFFTAG_SAMPLESPERPIXEL, 3);\n    TIFFSetField(tiff, TIFFTAG_ROWSPERSTRIP, height);\n    TIFFSetField(tiff, TIFFTAG_XRESOLUTION, 96.0);\n    TIFFSetField(tiff, TIFFTAG_YRESOLUTION, 96.0);\n    TIFFSetField(tiff, TIFFTAG_RESOLUTIONUNIT, RESUNIT_INCH);\n\n    for (int row = 0; row < height; ++row) {\n        unsigned char* row_data = &data[3 * width * row];\n        if (TIFFWriteScanline(tiff, row_data, row, 0) < 0) {\n            cerr << "Error writing TIFF file: " << filename << endl;\n            break;\n        }\n    }\n\n    TIFFClose(tiff);\n}\n\nvoid saveBMP(string filename, vector<unsigned char>& data, int width, int height)\n{\n    cv::Mat image(height, width, CV_8UC3, &data[0]);\n\n    cv::imwrite(filename, image);\n}\n\nvoid savePNG(string filename, vector<unsigned char>& data, int width, int height)\n{\n    FILE* file = fopen(filename.c_str(), "wb");\n\n    png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);\n    if (!png_ptr) {\n        cerr << "Error creating PNG write struct" << endl;\n        return;\n    }\n\n    png_infop info_ptr = png_create_info_struct(png_ptr);\n    if (!info_ptr) {\n        png_destroy_write_struct(&png_ptr, (png_infopp)NULL);\n        cerr << "Error creating PNG info struct" << endl;\n        return;\n    }\n\n    png_init_io(png_ptr, file);\n\n    png_set_IHDR(png_ptr, info_ptr, width, height, 8, PNG_COLOR_TYPE_RGB, PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);\n    png_set_pHYs(png_ptr, info_ptr, 96 * PNG_RESOLUTION_METER, 96 * PNG_RESOLUTION_METER, PNG_RESOLUTION_METER_UNIT_TYPE);\n\n    png_write_info(png_ptr, info_ptr);\n\n    vector<png_bytep> rows(height);\n    for (int row = 0; row < height; ++row) {\n        rows[row] = &data[3 * width * row];\n    }\n\n    png_write_image(png_ptr, &rows[0]);\n\n    png_write_end(png_ptr, NULL);\n\n    png_destroy_write_struct(&png_ptr, &info_ptr);\n\n    fclose(file);\n}\n\nvoid saveRAW(string filename, vector<unsigned char>& data, int width, int height)\n{\n    ofstream file(filename.c_str(), ios::out | ios::binary);\n    file.write((char*)&data[0], data.size());\n    file.close();\n}\n\n\nvoid convertTo8Bit(vector<unsigned char>& rgb_data, vector<unsigned char>& output_data, int width, int height)\n{\n    output_data.resize(width * height);\n\n    for (int i = 0; i < width * height; ++i) {\n        int r = rgb_data[3 * i];\n        int g = rgb_data[3 * i + 1];\n        int b = rgb_data[3 * i + 2];\n\n        int gray = int(0.299 * r + 0.587 * g + 0.114 * b + 0.5);\n\n        output_data[i] = (gray > 255) ? 255 : gray;\n    }\n}\n\nint main()\n{\n    string input_filename = "test.rgb";\n    string output_filename_prefix = "test";\n\n    ifstream file(input_filename.c_str(), ios::in | ios::binary);\n\n    int width = 640;\n    int height = 480;\n\n    vector<unsigned char> rgb_data(width * height * 3);\n    vector<unsigned char> output_data;\n\n    file.read((char*)&rgb_data[0], rgb_data.size());\n\n    convertTo8Bit(rgb_data, output_data, width, height);\n\n    saveTIFF(output_filename_prefix + ".tif", rgb_data, width, height);\n    saveBMP(output_filename_prefix + ".bmp", rgb_data, width, height);\n    savePNG(output_filename_prefix + ".png", rgb_data, width, height);\n    saveRAW(output_filename_prefix + ".raw", rgb_data, width, height);\n\n    cout << "Images saved successfully" << endl;\n\n    return 0;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br")])])},function(){var n=this._self._c;return n("p",[this._v("主函数中，先读取24位RGB彩色图像数据，然后调用"),n("code",[this._v("convertTo8Bit")]),this._v("函数将其转换成8位灰度图像数据。最后分别调用保存函数将图像数据保存成不同格式的文件。其中，水平垂直分辨率都为96。")])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_2-c-实现图像深度转换，并且保存常见的图像格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-c-实现图像深度转换，并且保存常见的图像格式"}},[this._v("#")]),this._v(" 2.C#实现图像深度转换，并且保存常见的图像格式")])},function(){var n=this._self._c;return n("blockquote",[n("p",[this._v("C#开发一份24位的RGB彩色图像buffer转化为8位图像，并且保存图像文件为tiff，bmp,png,raw格式，水平垂直分辨率为480；")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('csharpCopy Codeusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.IO;\n\nnamespace ImageConverter\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string inputFilename = "test.rgb";\n            string outputFilenamePrefix = "test";\n\n            int width = 640;\n            int height = 480;\n\n            byte[] rgbData = File.ReadAllBytes(inputFilename);\n            byte[] outputData;\n\n            ConvertTo8Bit(rgbData, out outputData, width, height);\n\n            SaveTIFF(outputFilenamePrefix + ".tif", outputData, width, height);\n            SaveBMP(outputFilenamePrefix + ".bmp", outputData, width, height);\n            SavePNG(outputFilenamePrefix + ".png", outputData, width, height);\n            SaveRAW(outputFilenamePrefix + ".raw", outputData);\n\n            Console.WriteLine("Images saved successfully");\n        }\n\n        static void ConvertTo8Bit(byte[] rgbData, out byte[] outputData, int width, int height)\n        {\n            outputData = new byte[width * height];\n\n            for (int i = 0; i < width * height; ++i)\n            {\n                int r = rgbData[3 * i];\n                int g = rgbData[3 * i + 1];\n                int b = rgbData[3 * i + 2];\n\n                int gray = (int)(0.299 * r + 0.587 * g + 0.114 * b + 0.5);\n\n                outputData[i] = (byte)(gray > 255 ? 255 : gray);\n            }\n        }\n\n        static void SaveTIFF(string filename, byte[] data, int width, int height)\n        {\n            using (var bitmap = new Bitmap(width, height, PixelFormat.Format8bppIndexed))\n            {\n                ColorPalette grayscalePalette = bitmap.Palette;\n                for (int i = 0; i < 256; ++i)\n                {\n                    grayscalePalette.Entries[i] = Color.FromArgb(i, i, i);\n                }\n                bitmap.Palette = grayscalePalette;\n\n                Rectangle rect = new Rectangle(0, 0, width, height);\n                BitmapData bitmapData = bitmap.LockBits(rect, ImageLockMode.WriteOnly, PixelFormat.Format8bppIndexed);\n\n                IntPtr ptr = bitmapData.Scan0;\n                int bytes = bitmapData.Stride * height;\n                byte[] rgbValues = new byte[bytes];\n\n                // Copy the data into RGB format.\n                for (int row = 0; row < height; ++row)\n                {\n                    int srcOffs = row * width;\n                    int dstOffs = row * bitmapData.Stride;\n                    for (int col = 0; col < width; ++col)\n                    {\n                        rgbValues[dstOffs++] = data[srcOffs++];\n                    }\n                }\n\n                System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, bytes);\n\n                bitmap.UnlockBits(bitmapData);\n\n                bitmap.SetResolution(480, 480);\n                bitmap.Save(filename, ImageFormat.Tiff);\n            }\n        }\n\n        static void SaveBMP(string filename, byte[] data, int width, int height)\n        {\n            using (var bitmap = new Bitmap(width, height, PixelFormat.Format8bppIndexed))\n            {\n                ColorPalette grayscalePalette = bitmap.Palette;\n                for (int i = 0; i < 256; ++i)\n                {\n                    grayscalePalette.Entries[i] = Color.FromArgb(i, i, i);\n                }\n                bitmap.Palette = grayscalePalette;\n\n                Rectangle rect = new Rectangle(0, 0, width, height);\n                BitmapData bitmapData = bitmap.LockBits(rect, ImageLockMode.WriteOnly, PixelFormat.Format8bppIndexed);\n\n                IntPtr ptr = bitmapData.Scan0;\n                int bytes = bitmapData.Stride * height;\n                byte[] rgbValues = new byte[bytes];\n\n                // Copy the data into RGB format.\n                for (int row = 0; row < height; ++row)\n                {\n                    int srcOffs = row * width;\n                    int dstOffs = row * bitmapData.Stride;\n                    for (int col = 0; col < width; ++col)\n                    {\n                        rgbValues[dstOffs++] = data[srcOffs++];\n                    }\n                }\n\n                System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, bytes);\n\n                bitmap.UnlockBits(bitmapData);\n\n                bitmap.SetResolution(480, 480);\n                bitmap.Save(filename, ImageFormat.Bmp);\n            }\n        }\n\n        static void SavePNG(string filename, byte[] data, int width, int height)\n        {\n            using (var bitmap = new Bitmap(width, height, PixelFormat.Format8bppIndexed))\n            {\n                ColorPalette grayscalePalette = bitmap.Palette;\n                for (int i = 0; i < 256; ++i)\n                {\n                    grayscalePalette.Entries[i] = Color.FromArgb(i, i, i);\n                }\n                bitmap.Palette = grayscalePalette;\n\n                Rectangle rect = new Rectangle(0, 0, width, height);\n                BitmapData bitmapData = bitmap.LockBits(rect, ImageLockMode.WriteOnly, PixelFormat.Format8bppIndexed);\n\n                IntPtr ptr = bitmapData.Scan0;\n                int bytes = bitmapData.Stride * height;\n                byte[] rgbValues = new byte[bytes];\n\n                // Copy the data into RGB format.\n                for (int row = 0; row < height; ++row)\n                {\n                    int srcOffs = row * width;\n                    int dstOffs = row * bitmapData.Stride;\n                    for (int col = 0; col < width; ++col)\n                    {\n                        rgbValues[dstOffs++] = data[srcOffs++];\n                    }\n                }\n\n                System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, bytes);\n\n                bitmap.UnlockBits(bitmapData);\n\n                bitmap.SetResolution(480, 480);\n                bitmap.Save(filename, ImageFormat.Png);\n            }\n        }\n\n        static void SaveRAW(string filename, byte[] data)\n        {\n            File.WriteAllBytes(filename, data);\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br")])])},function(){var n=this._self._c;return n("p",[this._v("主函数中，先读取24位RGB彩色图像数据，然后调用"),n("code",[this._v("ConvertTo8Bit")]),this._v("函数将其转换成8位灰度图像数据。最后分别调用保存函数将图像数据保存成不同格式的文件。其中，水平垂直分辨率都为480。")])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_3-用c-实现黑白相机，彩色相机的图像深度转换和存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-用c-实现黑白相机，彩色相机的图像深度转换和存储"}},[this._v("#")]),this._v(" 3.用C++实现黑白相机，彩色相机的图像深度转换和存储")])},function(){var n=this._self._c;return n("blockquote",[n("p",[this._v("C++ 把MONO12,Mono8,RGB16,RGB8 ,Mono10Packed,Mono12Packed的图像buffer 分别转化位8位，16位，24位的图像，并且保存为水平垂直分辨率为300的tiff,bmp,png,jpg,raw文件格式。")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\n// MONO10Packed和Mono12Packed的像素数据需要解包\nvoid UnpackPixels(const unsigned char* src, unsigned char* dst, const int pixelCount, const int bitsPerPixel) {\n    for (int i = 0; i < pixelCount; ++i) {\n        if (bitsPerPixel == 10) {\n            dst[2 * i]     = src[5 * i] << 2 | src[5 * i + 1] >> 6;\n            dst[2 * i + 1] = (src[5 * i + 1] & 0x3F) << 2 | src[5 * i + 2] >> 6;\n        } else if (bitsPerPixel == 12) {\n            dst[2 * i]     = src[6 * i] << 4 | src[6 * i + 1] >> 4;\n            dst[2 * i + 1] = (src[6 * i + 1] & 0x0F) << 8 | src[6 * i + 2];\n        }\n    }\n}\n\n// 将单通道图像转换为8位或16位图像\nvoid ConvertTo8or16Bit(const unsigned char* src, unsigned char* dst, const int pixelCount, const int bitsPerPixel) {\n    if (bitsPerPixel == 8) {\n        for (int i = 0; i < pixelCount; ++i) {\n            dst[i] = src[i];\n        }\n    } else if (bitsPerPixel == 16) {\n        for (int i = 0; i < pixelCount; ++i) {\n            dst[2 * i] = src[i] & 0xFF;\n            dst[2 * i + 1] = src[i] >> 8;\n        }\n    }\n}\n\n// 将RGB图像转换为24位图像\nvoid ConvertTo24Bit(const unsigned char* src, unsigned char* dst, const int pixelCount) {\n    for (int i = 0; i < pixelCount; ++i) {\n        dst[3 * i] = src[3 * i + 2];\n        dst[3 * i + 1] = src[3 * i + 1];\n        dst[3 * i + 2] = src[3 * i];\n    }\n}\n\n// 保存为tiff格式\nvoid SaveAsTiff(const string& filename, const unsigned char* data, const int width, const int height, const int bitsPerPixel) {\n    TIFF* tiff = TIFFOpen(filename.c_str(), "w");\n\n    TIFFSetField(tiff, TIFFTAG_IMAGEWIDTH, width);\n    TIFFSetField(tiff, TIFFTAG_IMAGELENGTH, height);\n    TIFFSetField(tiff, TIFFTAG_SAMPLESPERPIXEL, 1);\n    TIFFSetField(tiff, TIFFTAG_BITSPERSAMPLE, bitsPerPixel);\n    TIFFSetField(tiff, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);\n    TIFFSetField(tiff, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISBLACK);\n    TIFFSetField(tiff, TIFFTAG_COMPRESSION, COMPRESSION_LZW);\n    TIFFSetField(tiff, TIFFTAG_XRESOLUTION, 300.0);\n    TIFFSetField(tiff, TIFFTAG_YRESOLUTION, 300.0);\n    TIFFSetField(tiff, TIFFTAG_RESOLUTIONUNIT, RESUNIT_INCH);\n\n    TIFFSetField(tiff, TIFFTAG_ROWSPERSTRIP, TIFFDefaultStripSize(tiff, 0));\n    TIFFSetField(tiff, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);\n\n    const int bufferSize = width * height * bitsPerPixel / 8;\n    TIFFWriteEncodedStrip(tiff, 0, (void*)data, bufferSize);\n\n    TIFFClose(tiff);\n}\n\n// 保存为bmp格式\nvoid SaveAsBmp(const string& filename, const unsigned char* data, const int width, const int height, const int bitsPerPixel) {\n    BITMAPFILEHEADER bmpFileHeader;\n    bmpFileHeader.bfType = 0x4D42;\n    bmpFileHeader.bfSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + width * height * bitsPerPixel / 8;\n    bmpFileHeader.bfReserved1 = 0;\n    bmpFileHeader.bfReserved2 = 0;\n    bmpFileHeader.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n\n    BITMAPINFOHEADER bmpInfoHeader;\n    bmpInfoHeader.biSize = sizeof(BITMAPINFOHEADER);\n    bmpInfoHeader.biWidth = width;\n    bmpInfoHeader.biHeight = -height; // negative height to indicate top-down DIB\n    bmpInfoHeader.biPlanes = 1;\n    bmpInfoHeader.biBitCount = bitsPerPixel;\n    bmpInfoHeader.biCompression = BI_RGB;\n    bmpInfoHeader.biSizeImage = 0;\n    bmpInfoHeader.biXPelsPerMeter = 300.0 / 0.0254;\n    bmpInfoHeader.biYPelsPerMeter = 300.0 / 0.0254;\n    bmpInfoHeader.biClrUsed = 0;\n    bmpInfoHeader.biClrImportant = 0;\n\n    ofstream ofs(filename, ios::binary);\n    ofs.write(reinterpret_cast<char*>(&bmpFileHeader), sizeof(BITMAPFILEHEADER));\n    ofs.write(reinterpret_cast<char*>(&bmpInfoHeader), sizeof(BITMAPINFOHEADER));\n    ofs.write(reinterpret_cast<const char*>(data), width * height * bitsPerPixel / 8);\n    ofs.close();\n}\n\n// 保存为png格式\nvoid SaveAsPng(const string& filename, const unsigned char* data, const int width, const int height, const int bitsPerPixel) {\n    LodePNGColorType colorType;\n    if (bitsPerPixel == 8) {\n        colorType = LCT_GREY;\n    } else if (bitsPerPixel == 16) {\n        colorType = LCT_GREY_ALPHA;\n    } else if (bitsPerPixel == 24) {\n        colorType = LCT_RGB;\n    }\n\n    unsigned error = lodepng::encode(filename, data, width, height, colorType, 8);\n    if (error) {\n        cerr << "PNG encoding error: " << lodepng_error_text(error) << endl;\n    }\n}\n\n// 保存为jpeg格式\nvoid SaveAsJpeg(const string& filename, const unsigned char* data, const int width, const int height, const int bitsPerPixel) {\n    struct jpeg_compress_struct cinfo;\n    struct jpeg_error_mgr jerr;\n\n    FILE* outfile;\n    if ((outfile = fopen(filename.c_str(), "wb")) == NULL) {\n        cerr << "Cannot open JPEG file" << endl;\n        return;\n    }\n\n    cinfo.err = jpeg_std_error(&jerr);\n    jpeg_create_compress(&cinfo);\n    jpeg_stdio_dest(&cinfo, outfile);\n\n    cinfo.image_width = width;\n    cinfo.image_height = height;\n    if (bitsPerPixel == 8) {\n        cinfo.input_components = 1;\n        cinfo.in_color_space = JCS_GRAYSCALE;\n    } else if (bitsPerPixel == 24) {\n        cinfo.input_components = 3;\n        cinfo.in_color_space = JCS_RGB;\n    }\n    jpeg_set_defaults(&cinfo);\n    jpeg_set_quality(&cinfo, 90, true);\n    jpeg_start_compress(&cinfo, true);\n\n    JSAMPROW row_pointer[1];\n    int row_stride;\n    if (bitsPerPixel == 8) {\n        row_stride = width;\n    } else if (bitsPerPixel == 24) {\n        row_stride = 3 * width;\n    }\n    while (cinfo.next_scanline < cinfo.image_height) {\n        row_pointer[0] = const_cast<JSAMPROW>(&data[cinfo.next_scanline * row_stride]);\n        jpeg_write_scanlines(&cinfo, row_pointer, 1);\n    }\n\n    jpeg_finish_compress(&cinfo);\n    fclose(outfile);\n}\n\n// 保存为raw格式\nvoid SaveAsRaw(const string& filename, const unsigned char* data, const int width, const int height, const int bitsPerPixel) {\n    ofstream ofs(filename, ios::binary);\n    ofs.write(reinterpret_cast<const char*>(data), width * height * bitsPerPixel / 8);\n    ofs.close();\n}\n\nint main() {\n    const string inputFilename = "test.rgb";\n    const string outputFilenamePrefix = "test";\n\n    const int width = 640;\n    const int height = 480;\n\n    const int pixelCount = width * height;\n\n    // 读取图像数据\n    ifstream ifs(inputFilename, ios::binary);\n    unsigned char* rawData = new unsigned char[3 * pixelCount];\n    ifs.read(reinterpret_cast<char*>(rawData), 3 * pixelCount);\n    ifs.close();\n\n    // 分配内存并转换图像格式\n    unsigned char* outputData8 = new unsigned char[pixelCount];\n    unsigned char* outputData16 = new unsigned char[2 * pixelCount];\n    unsigned char* outputData24 = new unsigned char[3 * pixelCount];\n\n    unsigned char* unpackedData = new unsigned char[pixelCount];\n    UnpackPixels(rawData, unpackedData, pixelCount, 10); // 对于Mono10Packed图像需要解包\n    ConvertTo8or16Bit(unpackedData, outputData8, pixelCount, 8);\n    ConvertTo8or16Bit(unpackedData, outputData16, pixelCount, 16);\n\n    UnpackPixels(rawData, unpackedData, pixelCount, 12); // 对于Mono12Packed图像需要解包\n    ConvertTo8or16Bit(unpackedData, outputData8, pixelCount, 8);\n    ConvertTo8or16Bit(unpackedData, outputData16, pixelCount, 16);\n\n    ConvertTo8or16Bit(rawData, outputData8, pixelCount, 8);\n    ConvertTo8or16Bit(rawData, outputData16, pixelCount, 16);\n\n    ConvertTo24Bit(rawData, outputData24, pixelCount);\n\n    // 保存为不同格式的图像文件\n    SaveAsTiff(outputFilenamePrefix + "_8bit.tif", outputData8, width, height, 8);\n    SaveAsBmp(outputFilenamePrefix + "_8bit.bmp", outputData8, width, height, 8);\n    SaveAsPng(outputFilenamePrefix + "_8bit.png", outputData8, width, height, 8);\n    SaveAsJpeg(outputFilenamePrefix + "_8bit.jpg", outputData8, width, height, 8);\n    SaveAsRaw(outputFilenamePrefix + "_8bit.raw", outputData8, width, height, 8);\n\n    SaveAsTiff(outputFilenamePrefix + "_16bit.tif", outputData16, width, height, 16);\n    SaveAsBmp(outputFilenamePrefix + "_16bit.bmp", outputData16, width, height, 16);\n    SaveAsPng(outputFilenamePrefix + "_16bit.png", outputData16, width, height, 16);\n    SaveAsJpeg(outputFilenamePrefix + "_16bit.jpg", outputData16, width, height, 16);\n    SaveAsRaw(outputFilenamePrefix + "_16bit.raw", outputData16, width, height, 16);\n    }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_4-工业相机图像格式的数据存储原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-工业相机图像格式的数据存储原理"}},[this._v("#")]),this._v(" 4. 工业相机图像格式的数据存储原理")])},function(){var n=this,s=n._self._c;return s("ul",[s("li",[n._v("MONO8（单通道8位）：每个像素点只有一个通道，通道值的范围是0-255，使用一个字节存储。")]),n._v(" "),s("li",[n._v("MONO10Packed（单通道10位压缩）：每个像素点只有一个通道，通道值的范围是0-1023，使用2个字节存储。其中，每三个像素点的数据会被压缩为4个字节，即将30位的像素数据压缩为24位进行存储。")]),n._v(" "),s("li",[n._v("MONO12（单通道12位）：每个像素点只有一个通道，通道值的范围是0-4095，使用2个字节存储。")]),n._v(" "),s("li",[n._v("MONO12Packed（单通道12位压缩）：每个像素点只有一个通道，通道值的范围是0-4095，使用3个字节存储。其中，每两个像素点的数据会被压缩为3个字节，即将24位的像素数据压缩为18位进行存储。")]),n._v(" "),s("li",[n._v("RGB8（三通道8位）：每个像素点有三个通道，分别是红、绿、蓝三个通道，每个通道的像素值范围是0-255，总共使用三个字节存储。")]),n._v(" "),s("li",[n._v("RGB16（三通道16位）：每个像素点有三个通道，分别是红、绿、蓝三个通道，每个通道的像素值范围是0-65535，总共使用六个字节存储。")])])},function(){var n=this._self._c;return n("h3",{attrs:{id:"_5-24位图像处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-24位图像处理"}},[this._v("#")]),this._v(" 5. 24位图像处理")])},function(){var n=this._self._c;return n("blockquote",[n("p",[this._v("用C# 把24位的彩色相机buffer分别转化为8位，16位，24位的buffer，并且分别保存图像为tiff,jpg,png,raw,bmp文件，水平垂直分辨率为96")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('using System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\n\npublic static class ColorCameraBufferConverter\n{\n    public static void ConvertTo8Bit(byte[] inputBuffer, byte[] outputBuffer)\n    {\n        for (int i = 0; i < inputBuffer.Length; i += 3)\n        {\n            byte r = inputBuffer[i];\n            byte g = inputBuffer[i + 1];\n            byte b = inputBuffer[i + 2];\n\n            byte gray = (byte)(0.299 * r + 0.587 * g + 0.114 * b);\n\n            outputBuffer[i / 3] = gray;\n        }\n    }\n\n    public static void ConvertTo16Bit(byte[] inputBuffer, byte[] outputBuffer)\n    {\n        for (int i = 0; i < inputBuffer.Length; i += 3)\n        {\n            byte r = inputBuffer[i];\n            byte g = inputBuffer[i + 1];\n            byte b = inputBuffer[i + 2];\n\n            ushort red16 = (ushort)(r << 8);\n            ushort green16 = (ushort)(g << 8);\n            ushort blue16 = (ushort)(b << 8);\n\n            outputBuffer[i * 2] = (byte)red16;\n            outputBuffer[i * 2 + 1] = (byte)(red16 >> 8);\n            outputBuffer[i * 2 + 2] = (byte)green16;\n            outputBuffer[i * 2 + 3] = (byte)(green16 >> 8);\n            outputBuffer[i * 2 + 4] = (byte)blue16;\n            outputBuffer[i * 2 + 5] = (byte)(blue16 >> 8);\n        }\n    }\n\n    public static void ConvertTo24Bit(byte[] inputBuffer, byte[] outputBuffer)\n    {\n        Array.Copy(inputBuffer, outputBuffer, inputBuffer.Length);\n    }\n\n    public static void SaveToTiff(byte[] buffer, int width, int height, string fileName, long compression = EncoderValue.CompressionLZW)\n    {\n        using (Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format24bppRgb))\n        {\n            BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.WriteOnly, bitmap.PixelFormat);\n\n            try\n            {\n                int stride = bitmapData.Stride; // 行字节宽度\n\n                for (int y = 0; y < height; y++)\n                {\n                    byte[] lineBuffer = new byte[stride];\n\n                    Array.Copy(buffer, y * stride, lineBuffer, 0, stride);\n\n                    for (int x = 0; x < width; x++)\n                    {\n                        // RGB顺序\n                        int index1 = x * 3;\n                        int index2 = y * stride + x * 3;\n                        lineBuffer[index1] = buffer[index2 + 2];\n                        lineBuffer[index1 + 1] = buffer[index2 + 1];\n                        lineBuffer[index1 + 2] = buffer[index2];\n                    }\n\n                    System.Runtime.InteropServices.Marshal.Copy(lineBuffer, 0, (IntPtr)(bitmapData.Scan0 + y * stride), stride);\n                }\n\n                SaveTiff(bitmap, fileName, compression);\n            }\n            finally\n            {\n                bitmap.UnlockBits(bitmapData);\n            }\n        }\n    }\n\n    public static void SaveToJpeg(byte[] buffer, int width, int height, string fileName, int quality = 80)\n    {\n        using (Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format24bppRgb))\n        {\n            BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.WriteOnly, bitmap.PixelFormat);\n\n            try\n            {\n                int stride = bitmapData.Stride; // 行字节宽度\n\n                for (int y = 0; y < height; y++)\n                {\n                    byte[] lineBuffer = new byte[stride];\n\n                    Array.Copy(buffer, y * stride, lineBuffer, 0, stride);\n\n                    for (int x = 0; x < width; x++)\n                    {\n                        // RGB顺序\n                        int index1 = x * 3;\n                        int index2 = y * stride + x * 3;\n                        lineBuffer[index1] = buffer[index2 + 2];\n                        lineBuffer[index1 + 1] = buffer[index2 + 1];\n                        lineBuffer[index1 + 2] = buffer[index2];\n                    }\n\n                    System.Runtime.InteropServices.Marshal.Copy(lineBuffer, 0, (IntPtr)(bitmapData.Scan0 + y * stride), stride);\n                }\n\n                SaveJpeg(bitmap, fileName, quality);\n            }\n            finally\n            {\n                bitmap.UnlockBits(bitmapData);\n            }\n        }\n    }\n\n    public static void SaveToPng(byte[] buffer, int width, int height, string fileName)\n    {\n        using (Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format24bppRgb))\n        {\n            BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.WriteOnly, bitmap.PixelFormat);\n\n            try\n            {\n                int stride = bitmapData.Stride; // 行字节宽度\n\n                for (int y = 0; y < height; y++)\n                {\n                    byte[] lineBuffer = new byte[stride];\n\n                    Array.Copy(buffer, y * stride, lineBuffer, 0, stride);\n\n                    for (int x = 0; x < width; x++)\n                    {\n                        // RGB顺序\n                        int index1 = x * 3;\n                        int index2 = y * stride + x * 3;\n                        lineBuffer[index1] = buffer[index2 + 2];\n                        lineBuffer[index1 + 1] = buffer[index2 + 1];\n                        lineBuffer[index1 + 2] = buffer[index2];\n                    }\n\n                    System.Runtime.InteropServices.Marshal.Copy(lineBuffer, 0, (IntPtr)(bitmapData.Scan0 + y * stride), stride);\n                }\n\n                bitmap.Save(fileName, ImageFormat.Png);\n            }\n            finally\n            {\n                bitmap.UnlockBits(bitmapData);\n            }\n        }\n    }\n\n    public static void SaveToRaw(byte[] buffer, string fileName)\n    {\n        System.IO.File.WriteAllBytes(fileName, buffer);\n    }\n\n    public static void SaveToBmp(byte[] buffer, int width, int height, string fileName)\n    {\n        using (Bitmap bitmap = new Bitmap(width, height, PixelFormat.Format24bppRgb))\n        {\n            BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.WriteOnly, bitmap.PixelFormat);\n\n            try\n            {\n                int stride = bitmapData.Stride; // 行字节宽度\n\n                for (int y = 0; y < height; y++)\n                {\n                    byte[] lineBuffer = new byte[stride];\n\n                    Array.Copy(buffer, y * stride, lineBuffer, 0, stride);\n\n                    for (int x = 0; x < width; x++)\n                    {\n                        // RGB顺序\n                        int index1 = x * 3;\n                        int index2 = y * stride + x * 3;\n                        lineBuffer[index1] = buffer[index2 + 2];\n                        lineBuffer[index1 + 1] = buffer[index2 + 1];\n                        lineBuffer[index1 + 2] = buffer[index2];\n                    }\n\n                    System.Runtime.InteropServices.Marshal.Copy(lineBuffer, 0, (IntPtr)(bitmapData.Scan0 + y * stride), stride);\n                }\n\n                bitmap.Save(fileName, ImageFormat.Bmp);\n            }\n            finally\n            {\n                bitmap.UnlockBits(bitmapData);\n            }\n        }\n    }\n\n    private static void SaveTiff(Bitmap bitmap, string fileName, long compression)\n    {\n        EncoderParameters encoderParameters = new EncoderParameters(1);\n        encoderParameters.Param[0] = new EncoderParameter(Encoder.Compression, compression);\n\n        ImageCodecInfo myImageCodecInfo = GetEncoderInfo("image/tiff");\n\n        bitmap.Save(fileName, myImageCodecInfo, encoderParameters);\n    }\n\n    private static void SaveJpeg(Bitmap bitmap, string fileName, int quality)\n    {\n        EncoderParameters encoderParameters = new EncoderParameters(1);\n        encoderParameters.Param[0] = new EncoderParameter(Encoder.Quality, quality);\n\n        ImageCodecInfo myImageCodecInfo = GetEncoderInfo("image/jpeg");\n\n        bitmap.Save(fileName, myImageCodecInfo, encoderParameters);\n    }\n\n    private static ImageCodecInfo GetEncoderInfo(string mimeType)\n    {\n        ImageCodecInfo[] encoders = ImageCodecInfo.GetImageEncoders();\n\n        for (int i = 0; i < encoders.Length; i++)\n        {\n            if (encoders[i].MimeType == mimeType)\n            {\n                return encoders[i];\n            }\n        }\n\n        return null;\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br")])])},function(){var n=this,s=n._self._c;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('csharpCopy Code// 假设width和height已知并且是24位彩色图像的大小\nbyte[] inputBuffer = ... // 24位彩色图像buffer\n\nbyte[] outputBuffer1 = new byte[width * height];\nbyte[] outputBuffer2 = new byte[width * height * 2];\nbyte[] outputBuffer3 = new byte[width * height * 3];\n\nColorCameraBufferConverter.ConvertTo8Bit(inputBuffer, outputBuffer1);\nColorCameraBufferConverter.ConvertTo16Bit(inputBuffer, outputBuffer2);\nColorCameraBufferConverter.ConvertTo24Bit(inputBuffer, outputBuffer3);\n\nstring tiffFileName = "output.tiff";\nstring jpegFileName = "output.jpg";\nstring pngFileName = "output.png";\nstring rawFileName = "output.raw";\nstring bmpFileName = "output.bmp";\n\nint horizontalResolution = 96;\nint verticalResolution = 96;\n\nColorCameraBufferConverter.SaveToTiff(outputBuffer1, width, height, tiffFileName);\nColorCameraBufferConverter.SaveToJpeg(outputBuffer1, width, height, jpegFileName);\nColorCameraBufferConverter.SaveToPng(outputBuffer1, width, height, pngFileName);\nColorCameraBufferConverter.SaveToRaw(outputBuffer1, rawFileName);\nColorCameraBufferConverter.SaveToBmp(outputBuffer1, width, height, bmpFileName);\n\n// 保存时指定水平垂直分辨率\nSaveToTiff(outputBuffer1, width, height, tiffFileName, horizontalResolution, verticalResolution);\nSaveToJpeg(outputBuffer1, width, height, jpegFileName, horizontalResolution, verticalResolution);\nSaveToPng(outputBuffer1, width, height, pngFileName, horizontalResolution, verticalResolution);\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br")])])}],!1,null,null,null);s.default=e.exports}}]);